name: up_orgs
description: A new Flutter project.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ">=2.18.6 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # Flutter plugin for Firebase Core, enabling connecting to multiple Firebase apps.
  firebase_core: ^2.4.1

  # App Check works alongside other Firebase services to help protect your
  # backend resources from abuse, such as billing fraud or phishing.
  firebase_app_check: ^0.1.1+8

  # Flutter plugin for Firebase Auth, enabling Android and iOS authentication using
  # passwords, phone numbers and identity providers like Google, Facebook and Twitter.
  firebase_auth: ^4.2.5

  # Flutter plugin for Firebase Cloud Storage, a powerful, simple, and cost-effective
  # object storage service for Android and iOS.
  firebase_storage: ^11.0.11

  # Flutter plugin for Cloud Firestore, a cloud-hosted, noSQL database with live synchronization
  # and offline support on Android and iOS.
  cloud_firestore: ^4.3.2

  # Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design
  # pattern. Built to be used with the bloc state management package.
  flutter_bloc: ^8.1.2

  # A declarative router for Flutter based on Navigation 2 supporting deep linking, data-driven
  # routes and more.
  go_router: ^6.0.6

  # Simple direct Service Locator that allows to decouple the interface from a concrete implementation
  # and to access the concrete implementation from everywhere in your App.
  get_it: ^7.2.0

  # Functional programming in Dart and Flutter. All the main functional programming types and patterns
  # fully documented, tested, and with examples.
  fpdart: ^0.4.0

  # A Dart package that helps to implement value based equality without needing to explicitly
  # override == and hashCode.
  equatable: ^2.0.5

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  # A testing library which makes it easy to test blocs. Built to be used with
  # the bloc state management package.
  bloc_test: ^9.1.1

  # A Dart mock library which simplifies mocking with null safety support and
  # no manual mocks or code generation.
  mocktail: ^0.3.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
